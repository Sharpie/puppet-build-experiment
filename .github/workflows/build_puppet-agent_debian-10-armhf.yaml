---
name: Build puppet-agent for debain-10-armhf

on:
  # Manually triggered: https://developer.github.com/v3/activity/events/types/#repositorydispatchevent
  repository_dispatch:

env:
  PUPPET_AGENT_VERSION: '${{ github.event.client_payload.version }}'
  REBUILD: '${{ github.event.client_payload.rebuild }}'

jobs:
  build:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v1
        with:
          fetch-depth: 1
      - uses: actions/setup-ruby@v1.1.0
        with:
          ruby-version: '2.5.x'
      - uses: jfrog/setup-jfrog-cli@v1
      - name: Configure Bintray
        env:
          BT_API_KEY: '${{ secrets.BT_API_KEY }}'
        run: |
          jfrog bt config \
            --interactive=false \
            --user=sharpie \
            --key="${BT_API_KEY}"
      - name: Provision build environment
        run: |
          sudo apt update
          sudo apt install -y qemu-user-static

          gem install bundler
          bundle config set path '.bundle/lib'
          bundle install
      - name: Build puppet-runtime
        run: |
          export VANAGON_BUILD_VERSION=$(./scripts/component-version.sh puppet-agent "${PUPPET_AGENT_VERSION}" puppet-runtime)
          BINTRAY_VERSION="sharpie/puppet-agent-bin/puppet-runtime-raspbian-10-armhf/${VANAGON_BUILD_VERSION}"

          if [[ -z "${REBUILD}" ]] && jfrog bt version-show "${BINTRAY_VERSION}"; then
            printf 'Downloading puppet-runtime %s from BinTray\n' "${VANAGON_BUILD_VERSION}"

            mkdir -p output/puppet-runtime/output
            mkdir -p stage/puppet-runtime

            jfrog bt download-ver --flat --unpublished \
              "${BINTRAY_VERSION}" \
              stage/puppet-runtime/

            # --flat isn't having the desired effect as download-ver still
            # re-creates the folder structure from BinTray
            find stage/puppet-runtime -type f -exec mv -t output/puppet-runtime/output {} +
          else
            printf 'Building puppet-runtime %s\n' "${VANAGON_BUILD_VERSION}"

            bundle exec build puppet-runtime debian-10-armhf -e docker

            jfrog bt upload --flat \
              'output/puppet-runtime/output/agent-runtime-*' \
              "${BINTRAY_VERSION}" \
              "puppet-runtime/${VANAGON_BUILD_VERSION}/"
          fi
      - name: Build puppet-agent
        run: |
          export VANAGON_BUILD_VERSION="${PUPPET_AGENT_VERSION}"
          BINTRAY_VERSION="sharpie/puppet-experimental-debs/puppet-agent-raspbian-10-armhf/${VANAGON_BUILD_VERSION}"

          if [[ -z "${REBUILD}" ]] && jfrog bt version-show "${BINTRAY_VERSION}"; then
            printf 'Downloading puppet-agent %s from BinTray\n' "${VANAGON_BUILD_VERSION}"

            mkdir -p output/deb/buster/PC1
            mkdir stage/puppet-agent

            jfrog bt download-ver --flat --unpublished \
              "${BINTRAY_VERSION}" \
              stage/puppet-agent/

            # --flat isn't having the desired effect as download-ver still
            # re-creates the folder structure from BinTray
            find stage/puppet-agent -type f -exec mv -t output/deb/buster/PC1 {} +
          else
            printf 'Building puppet-agent %s\n' "${VANAGON_BUILD_VERSION}"

            bundle exec build puppet-agent debian-10-armhf -e docker

            jfrog bt upload --flat \
              --deb buster/puppet-experimental/armhf \
              'output/deb/buster/PC1/*.deb' \
              "${BINTRAY_VERSION}" \
              "pool/buster/puppet-experimental/p/puppet-agent/"
          fi
      - uses: actions/upload-artifact@v1
        with:
          name: vanagon-output.tar
          path: output


  test-puppet-agent:
    runs-on: ubuntu-18.04
    needs: build
    env:
      VANAGON_DOCKER_IMAGE: 'sharpie-docker-puppet-dev-images.bintray.io/raspbian-10-armhf:latest'
      TEST_REPO: 'https://github.com/puppetlabs/puppet-agent'
      TEST_COMPONENT: puppet-agent
    steps:
      - uses: actions/checkout@v1
        with:
          fetch-depth: 1
      - uses: actions/setup-ruby@v1.1.0
        with:
          ruby-version: '2.5.x'
      - uses: actions/download-artifact@v1
        with:
          name: vanagon-output.tar
          path: output
      - name: Provision test environment
        run: |
          sudo apt update
          sudo apt install -y qemu-user-static
          gem install bundler
          docker pull "${VANAGON_DOCKER_IMAGE}"

          test_package=$(find "${GITHUB_WORKSPACE}/output" -type f -name 'puppet-agent_*.deb')
          printf '::set-env name=TEST_PUPPET_PACKAGE::%s\n' "${test_package}"

          test_version="${PUPPET_AGENT_VERSION}"
          git clone "${TEST_REPO}" "${TEST_COMPONENT}"

          cd "${TEST_COMPONENT}"
          git checkout "${test_version}"

          cd acceptance
          printf 'gem "beaker-docker", "~> 0.7.0"\n' > Gemfile.local
          bundle config set path '.bundle/lib'
          bundle install

          find .bundle -path '*/aio/010_Install_Puppet_Agent.rb' \
            -exec cp "${GITHUB_WORKSPACE}/resources/test/puppet-agent/010_Install_Puppet_Agent.rb" {} \;
      - name: Run acceptance test
        run: |
          export SHA="${PUPPET_AGENT_VERSION}"
          export BEAKER_HOSTS="${GITHUB_WORKSPACE}/resources/test/puppet-agent/raspbian-10-armhf.yaml"

          cd "${TEST_COMPONENT}/acceptance"

          # Filter test cases that are expected to fail.
          #
          # ensure_puppet_facts_can_use_facter_ng.rb: facter-ng doesn't know what to make of Raspbian
          # ensure_facter_3_and_facter_4_output_matches.rb: facter-ng can't resolve networking facts
          #   properly under Docker+QEMU.
          export TESTS=$(find tests -type f \
                           -not -path tests/ensure_puppet_facts_can_use_facter_ng.rb \
                           -not -path tests/ensure_facter_3_and_facter_4_output_matches.rb \
                         | paste -s -d, -)

          bundle exec rake 'ci:test:aio[true]'


  test-facter:
    runs-on: ubuntu-18.04
    needs: build
    env:
      VANAGON_DOCKER_IMAGE: 'sharpie-docker-puppet-dev-images.bintray.io/raspbian-10-armhf:latest'
      TEST_REPO: 'https://github.com/puppetlabs/facter'
      TEST_COMPONENT: facter
    steps:
      - uses: actions/checkout@v1
        with:
          fetch-depth: 1
      - uses: actions/setup-ruby@v1.1.0
        with:
          ruby-version: '2.5.x'
      - uses: actions/download-artifact@v1
        with:
          name: vanagon-output.tar
          path: output
      - name: Provision test environment
        run: |
          sudo apt update
          sudo apt install -y qemu-user-static
          gem install bundler
          docker pull "${VANAGON_DOCKER_IMAGE}"

          test_package=$(find "${GITHUB_WORKSPACE}/output" -type f -name 'puppet-agent_*.deb')
          printf '::set-env name=TEST_PUPPET_PACKAGE::%s\n' "${test_package}"

          test_version=$(./scripts/component-version.sh puppet-agent "${PUPPET_AGENT_VERSION}" "${TEST_COMPONENT}")
          git clone "${TEST_REPO}" "${TEST_COMPONENT}"

          cd "${TEST_COMPONENT}"
          git checkout "${test_version}"

          cd acceptance
          printf 'gem "beaker-docker", "~> 0.7.0"\n' > Gemfile.local
          bundle config set path '.bundle/lib'
          bundle install

          find .bundle -path '*/aio/010_Install_Puppet_Agent.rb' \
            -exec cp "${GITHUB_WORKSPACE}/resources/test/puppet-agent/010_Install_Puppet_Agent.rb" {} \;
      - name: Run acceptance test
        run: |
          export SHA="${PUPPET_AGENT_VERSION}"
          export BEAKER_HOSTS="${GITHUB_WORKSPACE}/resources/test/puppet-agent/raspbian-10-armhf.yaml"

          cd "${TEST_COMPONENT}/acceptance"

          # Filter test cases that are expected to fail.
          #
          # no_errors_on_stderr: QEMU prints messages to stderr :(
          # weighted_cached_custom_facts: Always produces an empty cache {}.
          #   re-producible with released x86 packages. This test appears to
          #   only work when tested in Jenkins :(
          # dmi: Not properly available inside Docker
          # networking_facts: Networking is strange inside Docker
          # non_root_users_without_errors: QEMU prints messages to stderr :(
          # os_processors_and_kernel: Does not expect ARM
          # ruby: Does not expect ARM
          export TESTS=$(find tests -type f \
                         -not -path tests/no_errors_on_stderr.rb \
                         -not -path tests/custom_facts/weighted_cached_custom_facts.rb \
                         -not -path tests/facts/dmi.rb \
                         -not -path tests/facts/networking_facts.rb \
                         -not -path tests/facts/non_root_users_without_errors.rb \
                         -not -path tests/facts/os_processors_and_kernel.rb \
                         -not -path tests/facts/ruby.rb | paste -s -d, -)

          bundle exec rake 'ci:test:aio[true]'


  ship:
    if: "github.event.client_payload.ship == 'true'"
    runs-on: ubuntu-18.04
    needs:
      - test-puppet-agent
      - test-facter
    steps:
      - uses: actions/checkout@v1
        with:
          fetch-depth: 1
      - uses: actions/setup-ruby@v1.1.0
        with:
          ruby-version: '2.5.x'
      - name: Ship puppet-agent
        env:
          BT_API_KEY: '${{ secrets.BT_API_KEY }}'
          BT_GPG_KEY: '${{ secrets.BT_GPG_KEY }}'
        run: |
          runtime_version=$(./scripts/component-version.sh puppet-agent "${PUPPET_AGENT_VERSION}" puppet-runtime)
          runtime_release="sharpie/puppet-agent-bin/puppet-runtime-raspbian-10-armhf/${runtime_version}"
          agent_release="sharpie/puppet-experimental-debs/puppet-agent-raspbian-10-armhf/${PUPPET_AGENT_VERSION}"

          # This is done manually as the JFrog CLI cannot pass GPG passwords
          # to version-publish. The password is required to sign repository
          # metadata.
          curl -X POST \
            -u "sharpie:${BT_API_KEY}" \
            "https://api.bintray.com/content/${runtime_release}/publish"

          curl -X POST \
            -u "sharpie:${BT_API_KEY}" \
            -H "X-GPG-PASSPHRASE: ${BT_GPG_KEY}" \
            "https://api.bintray.com/content/${agent_release}/publish"

